---
description: CrewAI-specific development patterns and best practices for modular AAMAD implementation
alwaysApply: true
---

# CrewAI Development Patterns - MODULAR AAMAD APPROACH

## CrewAI Project Structure (MANDATORY)
- All agent and task configurations must be externalized to YAML files under a config/ subdirectory (e.g., config/agents.yaml, config/tasks.yaml)
- No inline agent or task definitions in Python code; always load from YAML.
- Main crew orchestration code (e.g. crew.py) must read these configs.

## Modular Development Workflow
- Break development into focused modules:
    - Module 1: CrewAI configuration only (agents/tasks YAML, crew initialization)
    - Module 2: API/backend integration only (connect CrewAI to API endpoints)
    - Module 3: Frontend integration only (e.g., assistant-ui, interface wiring)
    - Further modules: Other integrations as needed
- Start each module in a fresh Cursor session or window to avoid context bloat.
- Reference previous modules via file context, not chat history.
- Validate and test each module before proceeding.

## Agent & Task Configuration Standards
- Agents and tasks must have clear role/goal/backstory/expected output/required tools specified in YAML.
- Always specify dependencies and context passing between tasks.
- Use memory and error handling attributes when applicable.

## Integration & Patterns
- Streaming API responses for user interaction where possible.
- Log key agent/task events for observability and debugging.
- Use JSON-serializable output formats for exchanges between backend and frontend.

## Performance & Resource Use
- Design for async/parallel processing when appropriate for agent roles.
- Cache common data and optimize for API quota usage.

## Security & Configuration
- Never hardcode API keys; always load from environment variables.
- Provide .env.example and require manual .env completion for all required variables.
- Input validation and rate limiting recommended at all entry points.

## Compliance
- Log and monitor agent outputs for quality, safety, and privacy compliance.

## Principle: Maintain strict separation of concerns for config, backend, frontend, and external integrations. Each module should be independently testable and maintainable.
